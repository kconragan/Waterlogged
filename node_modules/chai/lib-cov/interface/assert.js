/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['interface/assert.js']) {
  _$jscoverage['interface/assert.js'] = [];
  _$jscoverage['interface/assert.js'][31] = 0;
  _$jscoverage['interface/assert.js'][35] = 0;
  _$jscoverage['interface/assert.js'][42] = 0;
  _$jscoverage['interface/assert.js'][57] = 0;
  _$jscoverage['interface/assert.js'][58] = 0;
  _$jscoverage['interface/assert.js'][81] = 0;
  _$jscoverage['interface/assert.js'][82] = 0;
  _$jscoverage['interface/assert.js'][99] = 0;
  _$jscoverage['interface/assert.js'][100] = 0;
  _$jscoverage['interface/assert.js'][102] = 0;
  _$jscoverage['interface/assert.js'][122] = 0;
  _$jscoverage['interface/assert.js'][123] = 0;
  _$jscoverage['interface/assert.js'][125] = 0;
  _$jscoverage['interface/assert.js'][145] = 0;
  _$jscoverage['interface/assert.js'][146] = 0;
  _$jscoverage['interface/assert.js'][163] = 0;
  _$jscoverage['interface/assert.js'][164] = 0;
  _$jscoverage['interface/assert.js'][181] = 0;
  _$jscoverage['interface/assert.js'][182] = 0;
  _$jscoverage['interface/assert.js'][199] = 0;
  _$jscoverage['interface/assert.js'][200] = 0;
  _$jscoverage['interface/assert.js'][217] = 0;
  _$jscoverage['interface/assert.js'][218] = 0;
  _$jscoverage['interface/assert.js'][235] = 0;
  _$jscoverage['interface/assert.js'][236] = 0;
  _$jscoverage['interface/assert.js'][252] = 0;
  _$jscoverage['interface/assert.js'][253] = 0;
  _$jscoverage['interface/assert.js'][270] = 0;
  _$jscoverage['interface/assert.js'][271] = 0;
  _$jscoverage['interface/assert.js'][287] = 0;
  _$jscoverage['interface/assert.js'][288] = 0;
  _$jscoverage['interface/assert.js'][305] = 0;
  _$jscoverage['interface/assert.js'][306] = 0;
  _$jscoverage['interface/assert.js'][323] = 0;
  _$jscoverage['interface/assert.js'][324] = 0;
  _$jscoverage['interface/assert.js'][341] = 0;
  _$jscoverage['interface/assert.js'][342] = 0;
  _$jscoverage['interface/assert.js'][359] = 0;
  _$jscoverage['interface/assert.js'][360] = 0;
  _$jscoverage['interface/assert.js'][377] = 0;
  _$jscoverage['interface/assert.js'][378] = 0;
  _$jscoverage['interface/assert.js'][395] = 0;
  _$jscoverage['interface/assert.js'][396] = 0;
  _$jscoverage['interface/assert.js'][416] = 0;
  _$jscoverage['interface/assert.js'][417] = 0;
  _$jscoverage['interface/assert.js'][434] = 0;
  _$jscoverage['interface/assert.js'][435] = 0;
  _$jscoverage['interface/assert.js'][455] = 0;
  _$jscoverage['interface/assert.js'][456] = 0;
  _$jscoverage['interface/assert.js'][475] = 0;
  _$jscoverage['interface/assert.js'][476] = 0;
  _$jscoverage['interface/assert.js'][478] = 0;
  _$jscoverage['interface/assert.js'][479] = 0;
  _$jscoverage['interface/assert.js'][480] = 0;
  _$jscoverage['interface/assert.js'][481] = 0;
  _$jscoverage['interface/assert.js'][499] = 0;
  _$jscoverage['interface/assert.js'][500] = 0;
  _$jscoverage['interface/assert.js'][518] = 0;
  _$jscoverage['interface/assert.js'][519] = 0;
  _$jscoverage['interface/assert.js'][539] = 0;
  _$jscoverage['interface/assert.js'][540] = 0;
  _$jscoverage['interface/assert.js'][541] = 0;
  _$jscoverage['interface/assert.js'][542] = 0;
  _$jscoverage['interface/assert.js'][545] = 0;
  _$jscoverage['interface/assert.js'][565] = 0;
  _$jscoverage['interface/assert.js'][566] = 0;
  _$jscoverage['interface/assert.js'][567] = 0;
  _$jscoverage['interface/assert.js'][568] = 0;
  _$jscoverage['interface/assert.js'][571] = 0;
  _$jscoverage['interface/assert.js'][590] = 0;
  _$jscoverage['interface/assert.js'][591] = 0;
  _$jscoverage['interface/assert.js'][592] = 0;
  _$jscoverage['interface/assert.js'][594] = 0;
  _$jscoverage['interface/assert.js'][595] = 0;
  _$jscoverage['interface/assert.js'][605] = 0;
  _$jscoverage['interface/assert.js'][606] = 0;
  _$jscoverage['interface/assert.js'][613] = 0;
  _$jscoverage['interface/assert.js'][614] = 0;
  _$jscoverage['interface/assert.js'][615] = 0;
}
_$jscoverage['interface/assert.js'][31]++;
module.exports = (function (chai) {
  _$jscoverage['interface/assert.js'][35]++;
  var Assertion = chai.Assertion, inspect = chai.inspect;
  _$jscoverage['interface/assert.js'][42]++;
  var assert = chai.assert = {};
  _$jscoverage['interface/assert.js'][57]++;
  assert.fail = (function (actual, expected, message, operator) {
  _$jscoverage['interface/assert.js'][58]++;
  throw new chai.AssertionError({actual: actual, expected: expected, message: message, operator: operator, stackStartFunction: assert.fail});
});
  _$jscoverage['interface/assert.js'][81]++;
  assert.ok = (function (val, msg) {
  _$jscoverage['interface/assert.js'][82]++;
  new Assertion(val, msg).is.ok;
});
  _$jscoverage['interface/assert.js'][99]++;
  assert.equal = (function (act, exp, msg) {
  _$jscoverage['interface/assert.js'][100]++;
  var test = new Assertion(act, msg);
  _$jscoverage['interface/assert.js'][102]++;
  test.assert(exp == test.obj, "expected " + test.inspect + " to equal " + inspect(exp), "expected " + test.inspect + " to not equal " + inspect(exp));
});
  _$jscoverage['interface/assert.js'][122]++;
  assert.notEqual = (function (act, exp, msg) {
  _$jscoverage['interface/assert.js'][123]++;
  var test = new Assertion(act, msg);
  _$jscoverage['interface/assert.js'][125]++;
  test.assert(exp != test.obj, "expected " + test.inspect + " to equal " + inspect(exp), "expected " + test.inspect + " to not equal " + inspect(exp));
});
  _$jscoverage['interface/assert.js'][145]++;
  assert.strictEqual = (function (act, exp, msg) {
  _$jscoverage['interface/assert.js'][146]++;
  new Assertion(act, msg).to.equal(exp);
});
  _$jscoverage['interface/assert.js'][163]++;
  assert.notStrictEqual = (function (act, exp, msg) {
  _$jscoverage['interface/assert.js'][164]++;
  new Assertion(act, msg).to.not.equal(exp);
});
  _$jscoverage['interface/assert.js'][181]++;
  assert.deepEqual = (function (act, exp, msg) {
  _$jscoverage['interface/assert.js'][182]++;
  new Assertion(act, msg).to.eql(exp);
});
  _$jscoverage['interface/assert.js'][199]++;
  assert.notDeepEqual = (function (act, exp, msg) {
  _$jscoverage['interface/assert.js'][200]++;
  new Assertion(act, msg).to.not.eql(exp);
});
  _$jscoverage['interface/assert.js'][217]++;
  assert.isTrue = (function (val, msg) {
  _$jscoverage['interface/assert.js'][218]++;
  new Assertion(val, msg).is["true"];
});
  _$jscoverage['interface/assert.js'][235]++;
  assert.isFalse = (function (val, msg) {
  _$jscoverage['interface/assert.js'][236]++;
  new Assertion(val, msg).is["false"];
});
  _$jscoverage['interface/assert.js'][252]++;
  assert.isNull = (function (val, msg) {
  _$jscoverage['interface/assert.js'][253]++;
  new Assertion(val, msg).to.equal(null);
});
  _$jscoverage['interface/assert.js'][270]++;
  assert.isNotNull = (function (val, msg) {
  _$jscoverage['interface/assert.js'][271]++;
  new Assertion(val, msg).to.not.equal(null);
});
  _$jscoverage['interface/assert.js'][287]++;
  assert.isUndefined = (function (val, msg) {
  _$jscoverage['interface/assert.js'][288]++;
  new Assertion(val, msg).to.equal(undefined);
});
  _$jscoverage['interface/assert.js'][305]++;
  assert.isDefined = (function (val, msg) {
  _$jscoverage['interface/assert.js'][306]++;
  new Assertion(val, msg).to.not.equal(undefined);
});
  _$jscoverage['interface/assert.js'][323]++;
  assert.isFunction = (function (val, msg) {
  _$jscoverage['interface/assert.js'][324]++;
  new Assertion(val, msg).to.be.a("function");
});
  _$jscoverage['interface/assert.js'][341]++;
  assert.isObject = (function (val, msg) {
  _$jscoverage['interface/assert.js'][342]++;
  new Assertion(val, msg).to.be.a("object");
});
  _$jscoverage['interface/assert.js'][359]++;
  assert.isArray = (function (val, msg) {
  _$jscoverage['interface/assert.js'][360]++;
  new Assertion(val, msg).to.be["instanceof"](Array);
});
  _$jscoverage['interface/assert.js'][377]++;
  assert.isString = (function (val, msg) {
  _$jscoverage['interface/assert.js'][378]++;
  new Assertion(val, msg).to.be.a("string");
});
  _$jscoverage['interface/assert.js'][395]++;
  assert.isNumber = (function (val, msg) {
  _$jscoverage['interface/assert.js'][396]++;
  new Assertion(val, msg).to.be.a("number");
});
  _$jscoverage['interface/assert.js'][416]++;
  assert.isBoolean = (function (val, msg) {
  _$jscoverage['interface/assert.js'][417]++;
  new Assertion(val, msg).to.be.a("boolean");
});
  _$jscoverage['interface/assert.js'][434]++;
  assert.typeOf = (function (val, type, msg) {
  _$jscoverage['interface/assert.js'][435]++;
  new Assertion(val, msg).to.be.a(type);
});
  _$jscoverage['interface/assert.js'][455]++;
  assert.instanceOf = (function (val, type, msg) {
  _$jscoverage['interface/assert.js'][456]++;
  new Assertion(val, msg).to.be["instanceof"](type);
});
  _$jscoverage['interface/assert.js'][475]++;
  assert.include = (function (exp, inc, msg) {
  _$jscoverage['interface/assert.js'][476]++;
  var obj = new Assertion(exp, msg);
  _$jscoverage['interface/assert.js'][478]++;
  if (Array.isArray(exp)) {
    _$jscoverage['interface/assert.js'][479]++;
    obj.to.include(inc);
  }
  else {
    _$jscoverage['interface/assert.js'][480]++;
    if ("string" === typeof exp) {
      _$jscoverage['interface/assert.js'][481]++;
      obj.to.contain.string(inc);
    }
  }
});
  _$jscoverage['interface/assert.js'][499]++;
  assert.match = (function (exp, re, msg) {
  _$jscoverage['interface/assert.js'][500]++;
  new Assertion(exp, msg).to.match(re);
});
  _$jscoverage['interface/assert.js'][518]++;
  assert.length = (function (exp, len, msg) {
  _$jscoverage['interface/assert.js'][519]++;
  new Assertion(exp, msg).to.have.length(len);
});
  _$jscoverage['interface/assert.js'][539]++;
  assert["throws"] = (function (fn, type, msg) {
  _$jscoverage['interface/assert.js'][540]++;
  if ("string" === typeof type) {
    _$jscoverage['interface/assert.js'][541]++;
    msg = type;
    _$jscoverage['interface/assert.js'][542]++;
    type = null;
  }
  _$jscoverage['interface/assert.js'][545]++;
  new Assertion(fn, msg).to["throw"](type);
});
  _$jscoverage['interface/assert.js'][565]++;
  assert.doesNotThrow = (function (fn, type, msg) {
  _$jscoverage['interface/assert.js'][566]++;
  if ("string" === typeof type) {
    _$jscoverage['interface/assert.js'][567]++;
    msg = type;
    _$jscoverage['interface/assert.js'][568]++;
    type = null;
  }
  _$jscoverage['interface/assert.js'][571]++;
  new Assertion(fn, msg).to.not["throw"](type);
});
  _$jscoverage['interface/assert.js'][590]++;
  assert.operator = (function (val, operator, val2, msg) {
  _$jscoverage['interface/assert.js'][591]++;
  if (! ~ ["==", "===", ">", ">=", "<", "<=", "!=", "!=="].indexOf(operator)) {
    _$jscoverage['interface/assert.js'][592]++;
    throw new Error("Invalid operator \"" + operator + "\"");
  }
  _$jscoverage['interface/assert.js'][594]++;
  var test = new Assertion(eval(val + operator + val2), msg);
  _$jscoverage['interface/assert.js'][595]++;
  test.assert(true === test.obj, "expected " + inspect(val) + " to be " + operator + " " + inspect(val2), "expected " + inspect(val) + " to not be " + operator + " " + inspect(val2));
});
  _$jscoverage['interface/assert.js'][605]++;
  assert.ifError = (function (val, msg) {
  _$jscoverage['interface/assert.js'][606]++;
  new Assertion(val, msg).to.not.be.ok;
});
  _$jscoverage['interface/assert.js'][613]++;
  (function alias(name, as) {
  _$jscoverage['interface/assert.js'][614]++;
  assert[as] = assert[name];
  _$jscoverage['interface/assert.js'][615]++;
  return alias;
})("length", "lengthOf")("throws", "throw");
});
_$jscoverage['interface/assert.js'].source = ["/*!"," * chai"," * Copyright(c) 2011 Jake Luer &lt;jake@alogicalparadox.com&gt;"," * MIT Licensed"," */","","/**"," * ### TDD Style Introduction"," *"," * The TDD style is exposed through `assert` interfaces. This provides"," * the classic assert.`test` notation, similiar to that packaged with"," * node.js. This assert module, however, provides several additional"," * tests and is browser compatible."," *"," *      // assert"," *      var assert = require('chai').assert;"," *        , foo = 'bar';"," *"," *      assert.typeOf(foo, 'string');"," *      assert.equal(foo, 'bar');"," *"," * #### Configuration"," *"," * By default, Chai does not show stack traces upon an AssertionError. This can"," * be changed by modifying the `includeStack` parameter for chai.Assertion. For example:"," *"," *      var chai = require('chai');"," *      chai.Assertion.includeStack = true; // defaults to false"," */","","module.exports = function (chai) {","  /*!","   * Chai dependencies.","   */","  var Assertion = chai.Assertion","    , inspect = chai.inspect;","","  /*!","   * Module export.","   */","","  var assert = chai.assert = {};","","  /**","   * # .fail(actual, expect, msg, operator)","   *","   * Throw a failure. Node.js compatible.","   *","   * @name fail","   * @param {*} actual value","   * @param {*} expected value","   * @param {String} message","   * @param {String} operator","   * @api public","   */","","  assert.fail = function (actual, expected, message, operator) {","    throw new chai.AssertionError({","        actual: actual","      , expected: expected","      , message: message","      , operator: operator","      , stackStartFunction: assert.fail","    });","  }","","  /**","   * # .ok(object, [message])","   *","   * Assert object is truthy.","   *","   *      assert.ok('everthing', 'everything is ok');","   *      assert.ok(false, 'this will fail');","   *","   * @name ok","   * @param {*} object to test","   * @param {String} message","   * @api public","   */","","  assert.ok = function (val, msg) {","    new Assertion(val, msg).is.ok;","  };","","  /**","   * # .equal(actual, expected, [message])","   *","   * Assert strict equality.","   *","   *      assert.equal(3, 3, 'these numbers are equal');","   *","   * @name equal","   * @param {*} actual","   * @param {*} expected","   * @param {String} message","   * @api public","   */","","  assert.equal = function (act, exp, msg) {","    var test = new Assertion(act, msg);","","    test.assert(","        exp == test.obj","      , 'expected ' + test.inspect + ' to equal ' + inspect(exp)","      , 'expected ' + test.inspect + ' to not equal ' + inspect(exp));","  };","","  /**","   * # .notEqual(actual, expected, [message])","   *","   * Assert not equal.","   *","   *      assert.notEqual(3, 4, 'these numbers are not equal');","   *","   * @name notEqual","   * @param {*} actual","   * @param {*} expected","   * @param {String} message","   * @api public","   */","","  assert.notEqual = function (act, exp, msg) {","    var test = new Assertion(act, msg);","","    test.assert(","        exp != test.obj","      , 'expected ' + test.inspect + ' to equal ' + inspect(exp)","      , 'expected ' + test.inspect + ' to not equal ' + inspect(exp));","  };","","  /**","   * # .strictEqual(actual, expected, [message])","   *","   * Assert strict equality.","   *","   *      assert.strictEqual(true, true, 'these booleans are strictly equal');","   *","   * @name strictEqual","   * @param {*} actual","   * @param {*} expected","   * @param {String} message","   * @api public","   */","","  assert.strictEqual = function (act, exp, msg) {","    new Assertion(act, msg).to.equal(exp);","  };","","  /**","   * # .notStrictEqual(actual, expected, [message])","   *","   * Assert strict equality.","   *","   *      assert.notStrictEqual(1, true, 'these booleans are not strictly equal');","   *","   * @name notStrictEqual","   * @param {*} actual","   * @param {*} expected","   * @param {String} message","   * @api public","   */","","  assert.notStrictEqual = function (act, exp, msg) {","    new Assertion(act, msg).to.not.equal(exp);","  };","","  /**","   * # .deepEqual(actual, expected, [message])","   *","   * Assert not deep equality.","   *","   *      assert.deepEqual({ tea: 'green' }, { tea: 'green' });","   *","   * @name deepEqual","   * @param {*} actual","   * @param {*} expected","   * @param {String} message","   * @api public","   */","","  assert.deepEqual = function (act, exp, msg) {","    new Assertion(act, msg).to.eql(exp);","  };","","  /**","   * # .notDeepEqual(actual, expected, [message])","   *","   * Assert not deep equality.","   *","   *      assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });","   *","   * @name notDeepEqual","   * @param {*} actual","   * @param {*} expected","   * @param {String} message","   * @api public","   */","","  assert.notDeepEqual = function (act, exp, msg) {","    new Assertion(act, msg).to.not.eql(exp);","  };","","  /**","   * # .isTrue(value, [message])","   *","   * Assert `value` is true.","   *","   *      var tea_served = true;","   *      assert.isTrue(tea_served, 'the tea has been served');","   *","   * @name isTrue","   * @param {Boolean} value","   * @param {String} message","   * @api public","   */","","  assert.isTrue = function (val, msg) {","    new Assertion(val, msg).is.true;","  };","","  /**","   * # .isFalse(value, [message])","   *","   * Assert `value` is false.","   *","   *      var tea_served = false;","   *      assert.isFalse(tea_served, 'no tea yet? hmm...');","   *","   * @name isFalse","   * @param {Boolean} value","   * @param {String} message","   * @api public","   */","","  assert.isFalse = function (val, msg) {","    new Assertion(val, msg).is.false;","  };","","  /**","   * # .isNull(value, [message])","   *","   * Assert `value` is null.","   *","   *      assert.isNull(err, 'no errors');","   *","   * @name isNull","   * @param {*} value","   * @param {String} message","   * @api public","   */","","  assert.isNull = function (val, msg) {","    new Assertion(val, msg).to.equal(null);","  };","","  /**","   * # .isNotNull(value, [message])","   *","   * Assert `value` is not null.","   *","   *      var tea = 'tasty chai';","   *      assert.isNotNull(tea, 'great, time for tea!');","   *","   * @name isNotNull","   * @param {*} value","   * @param {String} message","   * @api public","   */","","  assert.isNotNull = function (val, msg) {","    new Assertion(val, msg).to.not.equal(null);","  };","","  /**","   * # .isUndefined(value, [message])","   *","   * Assert `value` is undefined.","   *","   *      assert.isUndefined(tea, 'no tea defined');","   *","   * @name isUndefined","   * @param {*} value","   * @param {String} message","   * @api public","   */","","  assert.isUndefined = function (val, msg) {","    new Assertion(val, msg).to.equal(undefined);","  };","","  /**","   * # .isDefined(value, [message])","   *","   * Assert `value` is not undefined.","   *","   *      var tea = 'cup of chai';","   *      assert.isDefined(tea, 'no tea defined');","   *","   * @name isUndefined","   * @param {*} value","   * @param {String} message","   * @api public","   */","","  assert.isDefined = function (val, msg) {","    new Assertion(val, msg).to.not.equal(undefined);","  };","","  /**","   * # .isFunction(value, [message])","   *","   * Assert `value` is a function.","   *","   *      var serve_tea = function () { return 'cup of tea'; };","   *      assert.isFunction(serve_tea, 'great, we can have tea now');","   *","   * @name isFunction","   * @param {Function} value","   * @param {String} message","   * @api public","   */","","  assert.isFunction = function (val, msg) {","    new Assertion(val, msg).to.be.a('function');","  };","","  /**","   * # .isObject(value, [message])","   *","   * Assert `value` is an object.","   *","   *      var selection = { name: 'Chai', serve: 'with spices' };","   *      assert.isObject(selection, 'tea selection is an object');","   *","   * @name isObject","   * @param {Object} value","   * @param {String} message","   * @api public","   */","","  assert.isObject = function (val, msg) {","    new Assertion(val, msg).to.be.a('object');","  };","","  /**","   * # .isArray(value, [message])","   *","   * Assert `value` is an instance of Array.","   *","   *      var menu = [ 'green', 'chai', 'oolong' ];","   *      assert.isArray(menu, 'what kind of tea do we want?');","   *","   * @name isArray","   * @param {*} value","   * @param {String} message","   * @api public","   */","","  assert.isArray = function (val, msg) {","    new Assertion(val, msg).to.be.instanceof(Array);","  };","","  /**","   * # .isString(value, [message])","   *","   * Assert `value` is a string.","   *","   *      var teaorder = 'chai';","   *      assert.isString(tea_order, 'order placed');","   *","   * @name isString","   * @param {String} value","   * @param {String} message","   * @api public","   */","","  assert.isString = function (val, msg) {","    new Assertion(val, msg).to.be.a('string');","  };","","  /**","   * # .isNumber(value, [message])","   *","   * Assert `value` is a number","   *","   *      var cups = 2;","   *      assert.isNumber(cups, 'how many cups');","   *","   * @name isNumber","   * @param {Number} value","   * @param {String} message","   * @api public","   */","","  assert.isNumber = function (val, msg) {","    new Assertion(val, msg).to.be.a('number');","  };","","  /**","   * # .isBoolean(value, [message])","   *","   * Assert `value` is a boolean","   *","   *      var teaready = true","   *        , teaserved = false;","   *","   *      assert.isBoolean(tea_ready, 'is the tea ready');","   *      assert.isBoolean(tea_served, 'has tea been served');","   *","   * @name isBoolean","   * @param {*} value","   * @param {String} message","   * @api public","   */","","  assert.isBoolean = function (val, msg) {","    new Assertion(val, msg).to.be.a('boolean');","  };","","  /**","   * # .typeOf(value, name, [message])","   *","   * Assert typeof `value` is `name`.","   *","   *      assert.typeOf('tea', 'string', 'we have a string');","   *","   * @name typeOf","   * @param {*} value","   * @param {String} typeof name","   * @param {String} message","   * @api public","   */","","  assert.typeOf = function (val, type, msg) {","    new Assertion(val, msg).to.be.a(type);","  };","","  /**","   * # .instanceOf(object, constructor, [message])","   *","   * Assert `value` is instanceof `constructor`.","   *","   *      var Tea = function (name) { this.name = name; }","   *        , Chai = new Tea('chai');","   *","   *      assert.instanceOf(Chai, Tea, 'chai is an instance of tea');","   *","   * @name instanceOf","   * @param {Object} object","   * @param {Constructor} constructor","   * @param {String} message","   * @api public","   */","","  assert.instanceOf = function (val, type, msg) {","    new Assertion(val, msg).to.be.instanceof(type);","  };","","  /**","   * # .include(value, includes, [message])","   *","   * Assert the inclusion of an object in another. Works","   * for strings and arrays.","   *","   *      assert.include('foobar', 'bar', 'foobar contains string `var`);","   *      assert.include([ 1, 2, 3], 3, 'array contains value);","   *","   * @name include","   * @param {Array|String} value","   * @param {*} includes","   * @param {String} message","   * @api public","   */","","  assert.include = function (exp, inc, msg) {","    var obj = new Assertion(exp, msg);","","    if (Array.isArray(exp)) {","      obj.to.include(inc);","    } else if ('string' === typeof exp) {","      obj.to.contain.string(inc);","    }","  };","","  /**","   * # .match(value, regex, [message])","   *","   * Assert that `value` matches regular expression.","   *","   *      assert.match('foobar', /^foo/, 'Regexp matches');","   *","   * @name match","   * @param {*} value","   * @param {RegExp} RegularExpression","   * @param {String} message","   * @api public","   */","","  assert.match = function (exp, re, msg) {","    new Assertion(exp, msg).to.match(re);","  };","","  /**","   * # .length(value, constructor, [message])","   *","   * Assert that object has expected length.","   *","   *      assert.length([1,2,3], 3, 'Array has length of 3');","   *      assert.length('foobar', 5, 'String has length of 6');","   *","   * @name length","   * @param {*} value","   * @param {Number} length","   * @param {String} message","   * @api public","   */","","  assert.length = function (exp, len, msg) {","    new Assertion(exp, msg).to.have.length(len);","  };","","  /**","   * # .throws(function, [constructor/regexp], [message])","   *","   * Assert that a function will throw a specific","   * type of error.","   *","   *      assert.throw(fn, ReferenceError, 'function throw reference error');","   *","   * @name throws","   * @alias throw","   * @param {Function} function to test","   * @param {ErrorConstructor} constructor","   * @param {String} message","   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types","   * @api public","   */","","  assert.throws = function (fn, type, msg) {","    if ('string' === typeof type) {","      msg = type;","      type = null;","    }","","    new Assertion(fn, msg).to.throw(type);","  };","","  /**","   * # .doesNotThrow(function, [constructor/regexp], [message])","   *","   * Assert that a function will throw a specific","   * type of error.","   *","   *      var fn = function (err) { if (err) throw Error(err) };","   *      assert.doesNotThrow(fn, Error, 'function throw reference error');","   *","   * @name doesNotThrow","   * @param {Function} function to test","   * @param {ErrorConstructor} constructor","   * @param {String} message","   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types","   * @api public","   */","","  assert.doesNotThrow = function (fn, type, msg) {","    if ('string' === typeof type) {","      msg = type;","      type = null;","    }","","    new Assertion(fn, msg).to.not.throw(type);","  };","","  /**","   * # .operator(val, operator, val2, [message])","   *","   * Compare two values using operator.","   *","   *      assert.operator(1, '&lt;', 2, 'everything is ok');","   *      assert.operator(1, '&gt;', 2, 'this will fail');","   *","   * @name operator","   * @param {*} object to test","   * @param {String} operator","   * @param {*} second object","   * @param {String} message","   * @api public","   */","","  assert.operator = function (val, operator, val2, msg) {","    if (!~['==', '===', '&gt;', '&gt;=', '&lt;', '&lt;=', '!=', '!=='].indexOf(operator)) {","      throw new Error('Invalid operator \"' + operator + '\"');","    }","    var test = new Assertion(eval(val + operator + val2), msg);","    test.assert(","        true === test.obj","      , 'expected ' + inspect(val) + ' to be ' + operator + ' ' + inspect(val2)","      , 'expected ' + inspect(val) + ' to not be ' + operator + ' ' + inspect(val2) );","  };","","  /*!","   * Undocumented / untested","   */","","  assert.ifError = function (val, msg) {","    new Assertion(val, msg).to.not.be.ok;","  };","","  /*!","   * Aliases.","   */","","  (function alias(name, as){","    assert[as] = assert[name];","    return alias;","  })","  ('length', 'lengthOf')","  ('throws', 'throw');","};"];
